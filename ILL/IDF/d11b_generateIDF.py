import os
path = os.path.abspath("")
import sys
sys.path.insert(0, path)
from helper import MantidGeom

instrument_name = 'D11B'
valid_from = "2020-12-01 00:00:00"
monochromator_source = -22
zMon1 = -16.7
zMon2 = -1.2
number_of_tubes_center = 192
number_of_tubes_panels = 32
number_of_pixels_per_tube = 256
pixel_center = "pixel_center"
pixel_panels = "pixel_panels"
# we need to apply 90 rotation to the center detector (only) to get the tube orientation right for tube masking
# at the same time we want detector IDs start from lower left corner (looking from sample)
# and increment first upwards, then rightwards, since that's how the data is stored in nexus
# because of the rotation, here x and y are actually swapped!
center_pixel_x = 8./1000
center_pixel_y = 4./1000
thickness = 0.0001
distance = 8.
z_gap = 0. # TO BE CHECKED
x_gap = 0. # TO BE CHECKED

id0 = '0'  # center detector
id1 = str(number_of_tubes_center * number_of_pixels_per_tube)  # left detector
id2 = str((number_of_tubes_center + number_of_tubes_panels) * number_of_pixels_per_tube)  # right detector

detector0 = "detector_center"
xstart = repr(-center_pixel_x * (number_of_tubes_center - 1) / 2)
xstep = repr(center_pixel_x)
xpixels = repr(number_of_tubes_center)
ystart = repr(-center_pixel_y * (number_of_pixels_per_tube - 1) / 2)
ystep = repr(center_pixel_y)
ypixels = repr(number_of_pixels_per_tube)

detector1 = "detector_left"
xstart_left = repr(center_pixel_y * (number_of_pixels_per_tube - 1)/ 2 + center_pixel_x * (number_of_tubes_panels - 1) + x_gap)
xstep_left = repr(-center_pixel_x)
xpixels_left = repr(number_of_tubes_panels)
ystart_left = repr(-center_pixel_y * (number_of_pixels_per_tube - 1)/ 2)
ystep_left = repr(center_pixel_y)
ypixels_left = repr(number_of_pixels_per_tube)

detector2 = "detector_right"
xstart_right = repr(-center_pixel_y * (number_of_pixels_per_tube - 1)/ 2 - x_gap)
xstep_right = xstep_left
xpixels_right = xpixels_left
ystart_right = ystart_left
ystep_right = ystep_left
ypixels_right = ypixels_left

comment = """ This is the instrument definition file of the D11B SANS instrument at the ILL.
       Generated file, PLEASE DO NOT EDIT THIS FILE!
       This file was automatically generated by mantidgeometry/ILL/IDF/d11b_generateIDF.py
       > python3 ./ILL/IDF/d11b_generateIDF.py
       """
d11b = MantidGeom(instrument_name, comment=comment, valid_from=valid_from)
d11b.addSnsDefaults(default_view='3D',axis_view_3d='z-')
d11b.addComment("SOURCE")
d11b.addComponentILL("monochromator", 0., 0., monochromator_source, "source")
d11b.addComment("Sample position")
d11b.addComponentILL("sample_position", 0., 0., 0., "SamplePos")
d11b.addComment("MONITORS")
d11b.addMonitors(names=["monitor1", "monitor2"], distance=[zMon1, zMon2])
d11b.addComment("MONITOR SHAPE")
d11b.addDummyMonitor(0.01, 0.03)
d11b.addComment("MONITOR IDs")
d11b.addMonitorIds([repr(100000), repr(100001)])
d11b.addComment("DETECTORS")
d11b.addComponentILL("detector", 0., 0., 0.)
detector = d11b.makeTypeElement("detector")
d11b.addComponentRectangularDetector(detector0, 0., 0., distance, idstart=id0, rotz=90., idfillbyfirst="x",
                                     idstepbyrow=str(number_of_tubes_center), root=detector)
d11b.addComponentRectangularDetector(detector1, 0., 0., distance - z_gap, idstart=id1, idfillbyfirst="y",
                                    idstepbyrow=str(number_of_pixels_per_tube), root=detector)
d11b.addComponentRectangularDetector(detector2, 0., 0., distance - z_gap, idstart=id2, idfillbyfirst="y",
                                    idstepbyrow=str(number_of_pixels_per_tube), root=detector)
d11b.addComment("CENTER DETECTOR")
d11b.addRectangularDetector(detector0, pixel_center, xstart, xstep, xpixels, ystart, ystep, ypixels)
d11b.addComment("LEFT")
d11b.addRectangularDetector(detector1, pixel_panels, xstart_left, xstep_left, xpixels_left, ystart_left, ystep_left, ypixels_left)
d11b.addComment("RIGHT")
d11b.addRectangularDetector(detector2, pixel_panels, xstart_right, xstep_right, xpixels_right, ystart_right, ystep_right, ypixels_right)
# here x and y are swapped
x = center_pixel_x
y = center_pixel_y
d11b.addCuboidPixel(pixel_center,
                    [-x, -y, thickness/2.], [-x, y, thickness/2.],
                    [-x, -y, -thickness/2.], [x, -y, -thickness/2.],
                    shape_id=pixel_center)
# for the panels we swap them back again
x = center_pixel_y
y = center_pixel_x
d11b.addCuboidPixel(pixel_panels,
                    [-x, -y, thickness/2.], [-x, y, thickness/2.],
                    [-x, -y, -thickness/2.], [x, -y, -thickness/2.],
                    shape_id=pixel_panels)
d11b.writeGeom("./ILL/IDF/" + instrument_name + "_Definition.xml")
