from __future__ import (absolute_import, division, print_function)
import numpy as np
import os, sys
path = os.path.abspath('')
sys.path.insert(0, path)
from time import gmtime, strftime
from math import *
import argparse
from helper import MantidGeom

parser = argparse.ArgumentParser()
parser.add_argument('--geometrytype', help='Generate real (R) or neutronic (N) positions.')
parser.add_argument('--firsttubedefocus', help='Whether the analyser of the first tube are focused on the midpoint.')
args = parser.parse_args()

comment = """ This is the instrument definition file of the IN16B (BATS) at the ILL.
       Generated file, PLEASE DO NOT EDIT THIS FILE!
       This file was automatically generated by mantidgeometry/ILL/IDF/in16b_bats_generateIDF.py
       https://www.ill.eu/users/instruments/instruments-list/in16b/description/instrument-layout/
       Run in the top level directory:
       python ILL/IDF/in16b_bats_generateIDF.py
       For the neutronic positions (for debugging):
       python ILL/IDF/in16b_bats_generateIDF.py \-\-geometrytype N
       """

instrument_name = "IN16B"
# valid_from = "2018-03-01 00:00:00" # this is the starting date for BATS mode
valid_from = "1901-01-01 00:00:00" # we want to give a retroactive force
last_modified = strftime("%Y-%m-%d %H:%M:%S", gmtime())
ch12 = 34.3
ch34 = 33.388
mon = -0.178
psd_analyser = 2.
sd = 0.065
sd_analyser = 2. - sd/2.
psd = 0.102
SDs = 8
PSDs = 16
pixels = 128
height = 0.3
SD_azimuths = np.linspace(10,120,SDs).tolist()
PSD_azimuths = [25.1,32.9,40.7,48.5,56.3,64.1,71.9,79.7,87.5,95.3,103.1,110.9,118.7,126.5,134.3,142.1]

def topolar(x, y, z):
    r = sqrt(x**2+y**2+z**2)
    t = acos(z/r)
    p = atan2(y, x)
    return [r, t, p]

def tocartesian(r, t, p):
    x = r * sin(t) * cos(p)
    y = r * sin(t) * sin(p)
    z = r * cos(t)
    return [x, y, z]

def mirror(x, y, z, analyser, project=False):
    r, t, p = topolar(x, y, z)
    if project:
        p = pi
        t = pi - atan2(x, z)
        r += 2 * analyser - psd
    else:
        p += pi
        t = pi - t
        r += 2 * analyser
    return tocartesian(r, t, p)

geometry = MantidGeom(instrument_name, comment=comment, valid_from=valid_from)
geometry.addSnsDefaults(indirect=args.geometrytype != 'N')
geometry.addSamplePosition()
geometry.addModerator(distance=ch12, name="chopper")
geometry.addMonitors(names=["monitor"], distance=[mon], neutronic=args.geometrytype != 'N')
geometry.addDummyMonitor(0.001, 0.001)
geometry.addMonitorIds([0])
geometry.addComponent("single_detectors", "single_detectors", blank_location=False)
sds = geometry.makeTypeElement("single_detectors")
sdc = geometry.addComponent("single_pixel", root=sds)
for i in range(len(SD_azimuths)):
    t=SD_azimuths[i]* pi/180.
    x = sd * sin(t)
    y = 0.
    z = - sd * cos(t)
    nx, ny, nz = mirror(x, y, z, sd_analyser)
    if args.geometrytype == 'N':
        geometry.addLocation(root=sdc, x=nx, y=ny, z=nz, name="single_tube_{0}".format(i+1))
    else:
        geometry.addLocation(root=sdc, x=x, y=y, z=z, nx=nx, ny=ny, nz=nz, name="single_tube_{0}".format(i+1), neutronic=True)
geometry.addComponent("psds", "psds", blank_location=False)
psds = geometry.makeTypeElement("psds")
psdc = geometry.addComponent("single_pixel", root=psds)
for i in range(len(PSD_azimuths)):
    t = PSD_azimuths[i]*pi/180.
    x = psd * sin(t)
    z = - psd * cos(t)
    for p in range(pixels):
        y = -height/2 + p * height/pixels
        nx, ny, nz = mirror(x, y, z, psd_analyser, i==0 and args.firsttubedefocus == 'Y')
        if args.geometrytype == 'N':
            geometry.addLocation(root=psdc, x=nx, y=ny, z=nz, name="tube_{0}_pixel_{1}".format(i+1, p+1))
        else:
            geometry.addLocation(root=psdc, x=x, y=y, z=z, nx=nx, ny=ny, nz=nz, name="tube_{0}_pixel_{1}".format(i+1, p+1), neutronic=True)
pixel_factor = 1.
if args.geometrytype == 'N':
    # make pixels bigger so they are visible in instrument view
    pixel_factor = 10.
geometry.addCylinderPixel("single_pixel", [0.0005, 90., -90.], [0.,1.,0.], 0.0027*pixel_factor, 0.001*pixel_factor)
geometry.addDetectorIds("single_detectors", [PSDs*pixels+1,PSDs*pixels+SDs, None])
geometry.addDetectorIds("psds", [1,PSDs*pixels,None])
iname = 'F' if args.firsttubedefocus == 'Y' else ''
geometry.writeGeom("./ILL/IDF/" + instrument_name + iname + "_Definition.xml")
