"""This Python script contains a number of utility functions for
   creating IDF files for the ILL.
"""

from __future__ import print_function
from time import gmtime, strftime
import math
import numpy
from scipy.constants import degree
from shutil import copyfile
import os


def read_detector_box_list(filename):
    """Reads a text file containing rows with box Number, Theta, Detector IDs and Phi angle. The first
       line is ignored (column headings).

       returns: A list of tuples containing box_number, theta angle, a list of detector ids, phi angle
    """

    box_number = []
    theta = []
    detector_ids = []
    phi = []

    with open(filename) as detector_box_list:
        next(detector_box_list)  # Skip header line

        for line in detector_box_list:
            line_entries = line.split()

            box_number.append(int(line_entries[0]))
            theta.append(float(line_entries[1]))

            detector_id_line = []
            for value in line_entries[2].split(','):
                try:
                    detector_id_line.append(int(value))
                except:
                    pass
            detector_ids.append(detector_id_line)
            phi.append(float(line_entries[3]))

    return zip(box_number, theta, detector_ids, phi)


def write_header(output_file, instrument_name, authors, valid_from='1900-01-31 23:59:59'):
    output_file.write('<?xml version="1.0" encoding="UTF-8"?>\n')
    output_file.write(
        '<!-- For help on the notation used to specify an Instrument Definition File see '
        'http://www.mantidproject.org/IDF -->\n')
    output_file.write('<!-- This file is automatically generated by one of the scripts found in '
                      'https://github.com/mantidproject/mantidgeometry/tree/master/ILL/IDF -->\n')
    output_file.write('<instrument xmlns="http://www.mantidproject.org/IDF/1.0" '
                      'xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n')
    output_file.write('xsi:schemaLocation="http://www.mantidproject.org/IDF/1.0 Schema/IDFSchema.xsd" name="{0}"\n'
                      .format(instrument_name))
    output_file.write('valid-from="{}" last-modified="{}">\n'.format(valid_from, strftime("%Y-%m-%d %H:%M:%S", gmtime())))
    output_file.write('<!-- Authors: {} -->\n'.format(authors))
    output_file.write('  <defaults>\n')
    output_file.write('    <length unit="meter" />\n')
    output_file.write('    <angle unit="degree" />\n')
    output_file.write('    <reference-frame>\n')
    output_file.write('      <!-- The z-axis is set parallel to and in the direction of the beam. the\n')
    output_file.write('       y-axis points up and the coordinate system is right handed. -->\n')
    output_file.write('      <along-beam axis="z" />\n')
    output_file.write('      <pointing-up axis="y" />\n')
    output_file.write('      <handedness val="right" />\n')
    output_file.write('    </reference-frame>\n')
    output_file.write('  </defaults>\n')


def write_moderator(output_file):
    output_file.write('  <component type="moderator">\n')
    output_file.write('    <location z="-2.0" />\n')
    output_file.write('  </component>\n')
    output_file.write('  <type name="moderator" is="Source" />\n')


def write_sample_position(output_file):
    output_file.write('  <component type="sample_position">\n')
    output_file.write('    <location y="0.0" x="0.0" z="0.0" />\n')
    output_file.write('  </component>\n')
    output_file.write('  <type name="sample_position" is="SamplePos" />\n')


def box_coordinates(radius, theta, phi, orientation):
    """Computes cartesian coordinates for a detector box.
    """
    theta = theta * degree
    phi = phi * degree
    x = orientation * radius * numpy.sqrt(numpy.sin(theta) ** 2 - numpy.sin(phi) ** 2)
    y = radius * numpy.sin(phi)
    z = radius * numpy.cos(theta)
    return (x, y, z)


def tilting_angle(theta, phi, orientation):
    theta = theta * degree
    phi = phi * degree
    rotation_angle = orientation * (
    (numpy.arccos(numpy.cos(theta) / numpy.sin(theta) * numpy.sin(phi) / numpy.cos(phi)))) / degree - 90.0
    return rotation_angle


def write_end(output_file):
    output_file.write("</instrument>\n")


def clean_up_xml(output_filename):
    # Requires tidy, available on Ubuntu 14.04
    temp_filename = output_filename + '_temp'
    copyfile(output_filename, temp_filename)
    os.remove(output_filename)
    os.system('tidy -utf8 -xml -w 255 -i -c -q -asxml {0} > {1}'.format(temp_filename, output_filename))
    os.remove(temp_filename)
