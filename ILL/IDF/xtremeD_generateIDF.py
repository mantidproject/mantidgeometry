import os
path = os.path.abspath("")
import sys
sys.path.insert(0, path)
from helper import MantidGeom

import numpy as np

# introductory comment
comment = """
       This is the instrument definition file for XtremeD diffractometer.
       Generated file, PLEASE DO NOT EDIT THIS FILE!
       This file was automatically generated by mantidgeometry/ILL/IDF/xtremeD_generateIDF.py
       It has to be launched from mantidgeometry main directory.

       z axis defines the direction of the beam
       y axis will be the axis used for rotation
       coordinate system is right-handed

       y axis rotation defined by theta
       x axis rotation defined by phi
       z axis rotation defined by chi

       width x direction, height y direction
       """

instrumentName = 'XtremeD'
validFrom = "2022-01-01 00:00:00"

########################
# Source definition
########################

# This distance is variable (between 2500 and 3200 mm)
source = 0.0


########################
# Monitor definition
########################

zMonitor = -1

########################
# Detector definition
########################

numberModules = 9

sampleToDetectorRadius = 0.760

# pixel definition
pixelName = "pixel"
pixelWidth = 0.0020
pixelHeight = 0.0025
pixelThickness = 0.0001
pixelCenter = [pixelWidth / 2.0, pixelHeight / 2., 0]

numberPixelsVertical = 128
numberPixelsHorizontal = 864
numberPixelsHorizontalPerModule = 864//numberModules
dGamma = np.rad2deg(2.0*np.arctan(pixelWidth / 2.0 / sampleToDetectorRadius))


########################
# Instrument definition
########################

xtremed = MantidGeom(instrumentName, comment=comment, valid_from=validFrom)
xtremed.addSnsDefaults(default_view='3D', axis_view_3d='z-', theta_sign_axis="x")
xtremed.addComment("SOURCE")
xtremed.addComponentILL('source', 0.0, 0.0, source, 'Source')
xtremed.addComment("SAMPLE")
xtremed.addComponentILL("sample_position", 0.0, 0.0, 0.0, "SamplePos")
xtremed.addComment("DETECTORS")
xtremed.addComponentILL("detector", 0.0, 0.0, 0.0)

xtremed.addComment("MONITORS")
xtremed.addMonitors(names=["monitor"], distance=[zMonitor])
xtremed.addComment("MONITOR SHAPE")
xtremed.addDummyMonitor(0.01, 0.01)
xtremed.addComment("MONITOR IDs")
xtremed.addMonitorIds([repr(numberPixelsVertical*numberPixelsHorizontal+1)])

# fetch the detector XML element
detector = xtremed.makeTypeElement("detector")

# define detector banks
for i in range(numberModules):
    nPixelsPerModule = numberPixelsVertical*numberPixelsHorizontalPerModule
    xtremed.addDetectorIds("module {:d}_ids".format(i+1), [i*nPixelsPerModule+1,(i+1)*nPixelsPerModule,None])

bank = xtremed.makeTypeElement("bank")
modules = []
for i in range(numberModules):
    module = xtremed.addComponent("bank", idlist = "module {:d}_ids".format(i+1), root=detector)
    xtremed.addLocation(root=module, x=0, y=0 , z=0, rot_y=-i*numberPixelsHorizontalPerModule*dGamma , name="module {:d}".format(i+1))

bankComponent = xtremed.addComponent("pixel", root=bank)

rho = sampleToDetectorRadius
totalHeight = pixelHeight * numberPixelsVertical
zvalues = np.linspace(-totalHeight/2.0,totalHeight/2.0,numberPixelsVertical)
xyzs = []

rot = np.matmul([[1.0,0.0,0.0],[0.0,0.0,1.0],[0.0,-1.0,0.0]],[[-1.0,0.0,0.0],[0.0,-1.0,0.0],[0.0,0.0,1.0]])

for i in range(numberPixelsHorizontalPerModule):
    gamma = i*dGamma
    phi = 90.0 - gamma
    phirad = np.deg2rad(phi)
    for j, z in enumerate(zvalues):        
        theta = np.arctan2(z,sampleToDetectorRadius)
        name = "pixel({:d},{:d})".format(i+1,j+1)

        x = rho*np.cos(phirad)
        y = rho*np.sin(phirad)

        newcoords = np.matmul(np.linalg.inv(rot).T,[x,y,z])

        r = np.sqrt(np.sum(newcoords**2))

        theta = np.rad2deg(np.arccos(newcoords[2]/r))
        phi = np.rad2deg(np.arctan2(newcoords[1],newcoords[0]))

        xtremed.addLocationPolar(root=bankComponent,
                                 r=repr(r),
                                 theta=repr(theta),
                                 phi=repr(phi),
                                 name=name)

xtremed.addComment("Each pixel is a detector")
xtremed.addCuboidPixel(
    pixelName,
    [-pixelCenter[0], -pixelCenter[1],  pixelThickness/2.],
    [-pixelCenter[0],  pixelCenter[1],  pixelThickness/2.],
    [-pixelCenter[0], -pixelCenter[1], -pixelThickness/2.],
    [ pixelCenter[0], -pixelCenter[1], -pixelThickness/2.], shape_id="pixel-shape")

xtremed.writeGeom(instrumentName + "_Definition.xml")
