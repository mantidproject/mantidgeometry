import os
import sys
import time

import numpy as np

sys.path.insert(0, os.path.abspath(""))
from helper import MantidGeom

comment = """ This is the instrument definition file of the IN13 backscattering spectrometer.
       Generated file, PLEASE DO NOT EDIT THIS FILE!
       This file was automatically generated by mantidgeometry/ILL/IDF/in16bd_generateIDF.py
       https://www.ill.eu/users/instruments/instruments-list/in13/description/instrument-layout
       Run in the top level directory:
       python ILL/IDF/in13_generateIDF.py
       """

instrument_name = "IN13"
valid_from = "1901-01-01 00:00:00"
last_modified = time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime())

in13 = MantidGeom(instrument_name, comment=comment, valid_from=valid_from)
in13.addSnsDefaults(default_view="3D", axis_view_3d="z-", theta_sign_axis="x")

##########
# Source #
##########
in13.addComment("SOURCE")
in13.addComponentILL("source", 0.0, 0.0, -1.0, "Source")

##########
# Sample #
##########
in13.addComment("SAMPLE")
in13.addComponentILL("sample_position", 0.0, 0.0, 0.0, "SamplePos")

#######
# PSD #
#######
in13.addComment("DETECTORS - PSD")
psd_number_of_panels = 2
psd_number_of_tubes_per_panel = 8
psd_start_position = [-0.18, 0.04]
psd_number_pixels_per_tube = 128
psd_distance_to_sample = 0.52
psd_tube_width = 0.02
psd_pixel_width = 0.012
psd_pixel_height = 0.00364
psd_thickness = 0.001

# Place PSD panels
psd = in13.addComponent("psd", name="psd", idlist="psd_ids", blank_location=False)
in13.addLocation(root=psd, x=0.0, y=0.0, z=0.0, name="psd")
in13.addDetectorIds("psd_ids", [1, psd_number_of_panels*psd_number_of_tubes_per_panel*psd_number_pixels_per_tube, 1])

# Define PSD
psd = in13.makeTypeElement("psd")
for i in range(psd_number_of_panels):
    panel = in13.addComponent("psd_panel", root=psd, name=f"panel_{i+1}")
    in13.addLocation(root=panel, x=psd_start_position[i], y=0, z=psd_distance_to_sample, name=f"panel_{i+1}")

# Define PSD panels
panel = in13.makeTypeElement("psd_panel")
for i in range(psd_number_of_tubes_per_panel):
    tube = in13.addComponent("psd_tube", root=panel, name=f"tube_{i+1}")
    in13.addLocation(root=tube, x=i*psd_tube_width, y=0.0, z=0.0, name=f"tube_{i+1}")

# Define PSD tubes
tube_bottom_pos = -psd_pixel_height*psd_number_pixels_per_tube/2.0
tube_top_pos = psd_pixel_height*psd_number_pixels_per_tube/2.0
pixel_positions = np.linspace(tube_bottom_pos, tube_top_pos, psd_number_pixels_per_tube)
tube = in13.makeTypeElement("psd_tube")
for i in range(psd_number_pixels_per_tube):
    pixel = in13.addComponent("psd_pixel", root=tube, name=f"pixel_{i+1}")
    in13.addLocation(root=pixel, x=0.0, y=(i-64)*psd_pixel_height, z=0.0, name=f"pixel_{i+1}")

# Define PSD pixels
in13.addCylinderPixelAdvanced("psd_pixel",
                              center_bottom_base={"x": 0.0, "y": 0.0, "z": 0.0},
                              axis={"x": 0.0, "y": 1.0, "z": 0.0},
                              pixel_radius=psd_pixel_width/2.0,
                              pixel_height=psd_pixel_height,
                              algebra="cyl_approx")

###########
# MultiSD #
###########
in13.addComment("DETECTORS - MultiSD")
multisd_number_of_tubes_per_bank = 5
multisd_number_of_banks = 7
multisd_tube_height = 0.254
multisd_tube_radius = 0.0127

# Place MultiSD 
multisd = in13.addComponent("multisd", name="multisd", idlist="multisd_ids", blank_location=False)
in13.addLocation(root=multisd, x=0.0, y=0.0, z=0.0, name="multisd")
id_start = psd_number_of_panels*psd_number_of_tubes_per_panel*psd_number_pixels_per_tube
in13.addDetectorIds("multisd_ids", [id_start+1, id_start+multisd_number_of_banks*multisd_number_of_tubes_per_bank, 1])

# Define MultiSD
multisd = in13.makeTypeElement("multisd")
for i in range(multisd_number_of_banks):
    bank = in13.addComponent("multisd_bank", root=multisd, name=f"bank_{i+1}")
    in13.addLocation(root=bank, x=0.0, y=0.0, z=0.0, name=f"bank_{i+1}")

# Define MultiSD banks
bank = in13.makeTypeElement("multisd_bank")
for i in range(multisd_number_of_tubes_per_bank):
    tube = in13.addComponent("multisd_tube", root=bank, name=f"tube_{i+1}")
    in13.addLocationPolar(root=tube, r=repr(0.0), theta=repr(0.0), phi=repr(0.0), name=f"tube_{i+1}")

# Define MultiSD tube
in13.addCylinderPixelAdvanced("multisd_tube",
                              center_bottom_base={"x": 0.0, "y": -multisd_tube_height / 2.0, "z": 0.0},
                              axis={"x": 0.0, "y": 1.0, "z": 0.0}, 
                              pixel_radius=multisd_tube_radius,
                              pixel_height=multisd_tube_height,
                              algebra="cyl_approx")

############
# Monitors #
############
monitor_radius = 0.036
in13.addComment("MONITORS")
monitor_start_id = psd_number_of_panels*psd_number_of_tubes_per_panel*psd_number_pixels_per_tube + multisd_number_of_banks*multisd_number_of_tubes_per_bank + 1
monitor_name = "monitor_1"
monitor_distance = 0.580
in13.addMonitors(names=[monitor_name], distance=[monitor_distance])
monitor_id = repr(monitor_start_id + i)
in13.addMonitorIds([monitor_id])
in13.addDummyMonitor(monitor_radius, 0.01)

in13.writeGeom(instrument_name + "_Definition.xml")
