from math import pi
from time import strftime, gmtime
import os
import sys

path = os.path.abspath("")
sys.path.insert(0, path)

from helper import MantidGeom

comment = """ This is the instrument definition file of the IN16B in diffraction mode at the ILL.
       Generated file, PLEASE DO NOT EDIT THIS FILE!
       This file was automatically generated by mantidgeometry/ILL/IDF/in16bd_generateIDF.py
       https://www.ill.eu/users/instruments/instruments-list/in16b/description/instrument-layout/
       Run in the top level directory:
       python ILL/IDF/in16bd_generateIDF.py
       """

to_radians = pi / 180

instrument_name = "IN16BD"
valid_from = "1901-01-01 00:00:00"
last_modified = strftime("%Y-%m-%d %H:%M:%S", gmtime())

pixel_per_tube = 256
tube_width = 0.685
tube_radius = 0.0127
number_of_tubes = 8

tube_angles = [12, 31, 50, 69, 88, 107, 126, 145]
vertical_offset = 0.015
distance_to_sample = 1.855

chopper_to_sample = -34.3
monitor_to_sample = -0.178

in16b = MantidGeom(instrument_name, comment=comment, valid_from=valid_from)
in16b.addSnsDefaults(default_view='3D', axis_view_3d='z-', theta_sign_axis="x")

in16b.addComment("Sample position")
in16b.addSamplePosition()

in16b.addComment("Chopper position")
in16b.addModerator(distance=chopper_to_sample, name="chopper")

in16b.addComment("MONITOR")
in16b.addMonitors(names=["monitor"], distance=[monitor_to_sample])
in16b.addDummyMonitor(0.001, 0.001)
in16b.addMonitorIds([0])

in16b.addComment("Detector")
in16b.addComponentILL("detector", 0, 0, 0)
detector = in16b.makeTypeElement("detector")

# create tubes id lists
for i in range(number_of_tubes):
    in16b.addDetectorIds("tube_{0}_ids".format(i+1), [pixel_per_tube*i + 1, pixel_per_tube * (i+1), 1])

# create standard tube component and place them
tube = in16b.makeTypeElement("tube")
for i in range(number_of_tubes):
    current_tube = in16b.addComponent('tube', idlist="tube_{0}_ids".format(i+1), root=detector)
    in16b.addLocation(root=current_tube, x=0, y=pow(-1, i)*vertical_offset, z=0, rot_y=-tube_angles[i],
                      name="tube_{0}".format(i+1))

# add a pixel component to the tube component
tube_pixel = in16b.addComponent(root=tube, type_name='pixel')

# place pixels on the standard tube component
for i in range(pixel_per_tube):
    in16b.addLocation(root=tube_pixel, x=(pixel_per_tube // 2 - i) / pixel_per_tube * tube_width, y=0,
                      z=distance_to_sample, name="pixel_{0}".format(i+1))

# create pixel shape
in16b.addCylinderPixel(name="pixel", center_bottom_base=[tube_radius, 90., -90.],
                       axis=[1, 0, 0],
                       pixel_radius=tube_radius, pixel_height=tube_width / pixel_per_tube)

in16b.writeGeom("./ILL/IDF/" + instrument_name + "_Definition.xml")
